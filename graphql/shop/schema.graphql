enum NextTurnOperation {
  ATTEND
  SKIP
}

type Shop {
  id: ID!
  isClosed: Boolean!
  lastNumber: Int!
  nextNumber: Int!
  nextTurn: String
  lastTurns: [LastTurns!]!
  pendingTurnsAmount: Int!
  createdAt: DateTime!
  updatedAt: DateTime!
  details: ShopDetails!
  issuedNumber: [IssuedNumber!]!
}

type LastTurns {
  id: ID!
  status: IssuedNumberStatus!
  turn: String!
}

type ShopStatus {
  opens: Time!
  closes: Time!
}

type ShopDetails {
  shopId: ID!
  address: String!
  lat: Float!
  lng: Float!
  name: String!
  ownerPhone: String!
  shopPhone: String
  isOpen: Boolean!
  status: ShopStatus
  mondayTimeEnd: Time
  mondayTimeStart: Time
  tuesdayTimeEnd: Time
  tuesdayTimeStart: Time
  wednesdayTimeEnd: Time
  wednesdayTimeStart: Time
  thursdayTimeEnd: Time
  thursdayTimeStart: Time
  fridayTimeEnd: Time
  fridayTimeStart: Time
  saturdayTimeEnd: Time
  saturdayTimeStart: Time
  sundayTimeEnd: Time
  sundayTimeStart: Time
  createdAt: DateTime!
  updatedAt: DateTime!
}

type Query {
  lastTurns(shopId: ID!): [LastTurns!]!
  myShop: Shop!
  nearByShops(lat: Float!, lng: Float!, offset: Int! = 0): [ShopDetails!]!
  shops: [Shop!]!
}

type Mutation {
  registerShop(shop: ShopInput!): Shop!
  updateShop(shop: ShopInput!): Shop!
  nextTurn(op: NextTurnOperation!): Shop!
  cancelTurns: Shop!
  sendSms(phone: String!, message: String!): Boolean!
}

input ShopInput {
  id: ID
  address: String!
  lat: Float!
  lng: Float!
  name: String!
  shopPhone: String
  mondayTimeEnd: Time
  mondayTimeStart: Time
  tuesdayTimeEnd: Time
  tuesdayTimeStart: Time
  wednesdayTimeEnd: Time
  wednesdayTimeStart: Time
  thursdayTimeEnd: Time
  thursdayTimeStart: Time
  fridayTimeEnd: Time
  fridayTimeStart: Time
  saturdayTimeEnd: Time
  saturdayTimeStart: Time
  sundayTimeEnd: Time
  sundayTimeStart: Time
}
